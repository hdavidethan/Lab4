===============================================================================
Module : abstractFSM
===============================================================================
SCORE  LINE   FSM    
100.00 100.00 100.00 

Source File(s) : 

/afs/andrew.cmu.edu/usr2/dchwang/private/18240/lab4/lab4.sv

Module self-instances :

SCORE  LINE   FSM    NAME                 
100.00 100.00 100.00 abstractFSM_test.DUT 



-------------------------------------------------------------------------------
Line Coverage for Module : abstractFSM

             Line No.   Total   Covered  Percent
TOTAL                       22       22   100.00
ALWAYS             15        8        8   100.00
ALWAYS             37       11       11   100.00
ALWAYS             58        3        3   100.00

14                        always_comb begin
15         1/1              case (currState)
16                            cStart: begin
17         1/1                  nextState = (hMove == 4'd6) ? first : cStart;
18                            end
19                            first: begin
20         1/1                  nextState = (hMove == 4'd9) ? second :
21                                (hMove == 4'd2 || hMove == 4'd3 || hMove == 4'd4 || hMove == 4'd7 ||
22                                 hMove == 4'd8) ? win1 : first;
23                            end
24                            second: begin
25         1/1                  nextState = (hMove == 4'd2) ? win3 :
26                                (hMove == 4'd4 || hMove == 4'd7 || hMove == 4'd8) ? win2 : second;
27                            end
28         1/1                win1: nextState = win1;
29         1/1                win2: nextState = win2;
30         1/1                win3: nextState = win3;
31         1/1                default: nextState = cStart;
32                          endcase
33                        end
34                      
35                        // Output Generator
36                        always_comb begin
37         1/1              win = 1'b0;
38         1/1              unique case (currState)
39         1/1                cStart: cMove = 4'd5;
40         1/1                first: cMove = 4'd1;
41         1/1                second: cMove = 4'd3;
42                            win1: begin
43         1/1                  cMove = 4'd9;
44         1/1                  win = 1'b1;
45                            end
46                            win2: begin
47         1/1                  cMove = 4'd2;
48         1/1                  win = 1'b1;
49                            end
50                            win3: begin
51         1/1                  cMove = 4'd7;
52         1/1                  win = 1'b1;
53                            end
                        MISSING_DEFAULT
54                          endcase
55                        end
56                      
57                        always_ff @(posedge clock)
58         1/1              if (~reset_N)
59         1/1                currState <= cStart;
60                          else
61         1/1                currState <= nextState;

-------------------------------------------------------------------------------
FSM Coverage for Module : abstractFSM
Summary for FSM :: currState
            Total Covered Percent 
States      6     6       100.00  
Transitions 10    10      100.00  
Sequences   0     0               

State, Transition and Sequence Details for FSM :: currState
-------------------------------------------------------------------------------
states Covered 
cStart Covered 
first  Covered 
second Covered 
win1   Covered 
win2   Covered 
win3   Covered 

transitions    Covered 
cStart->first  Covered 
first->cStart  Covered 
first->second  Covered 
first->win1    Covered 
second->cStart Covered 
second->win2   Covered 
second->win3   Covered 
win1->cStart   Covered 
win2->cStart   Covered 
win3->cStart   Covered 

sequences Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : abstractFSM_test.DUT
===============================================================================

Instance :

SCORE  LINE   FSM    
100.00 100.00 100.00 


Instance's subtree :

SCORE  LINE   FSM    
100.00 100.00 100.00 


Module : 

SCORE  LINE   FSM    NAME        
100.00 100.00 100.00 abstractFSM 


Parent : 

SCORE  LINE   FSM    NAME             
100.00 100.00 --     abstractFSM_test 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : abstractFSM_test
===============================================================================
SCORE  LINE   FSM    
100.00 100.00 --     

Source File(s) : 

/afs/andrew.cmu.edu/usr2/dchwang/private/18240/lab4/lab4.sv

Module self-instances :

SCORE  LINE   FSM    NAME             
100.00 100.00 --     abstractFSM_test 



-------------------------------------------------------------------------------
Line Coverage for Module : abstractFSM_test

             Line No.   Total   Covered  Percent
TOTAL                      250      250   100.00
INITIAL            71        5        5   100.00
INITIAL            79      245      245   100.00

70                        initial begin
71         1/1              $monitor($time,, "state=%s, hMove=%d, cMove=%d, win=%b",
72                                  DUT.currState.name, hMove, cMove, win);
73         1/1              clock = 0;
74         3/3              forever #5 clock = ~clock;
75                        end
76                      
77                        initial begin
78                          // Initialize Values
79         2/2              hMove <= 4'b0000; reset_N <= 0;
80                      
81         2/2              @(posedge clock);
82                      
83                          // Release reset
84         1/1              reset_N <= 1;
85                          // Start test path for cStart
86         1/1              hMove <= 4'd0;
87         2/2              @(posedge clock);
88         1/1              hMove <= 4'd1;
89         2/2              @(posedge clock);
90         1/1              hMove <= 4'd2;
91         2/2              @(posedge clock);
92         1/1              hMove <= 4'd3;
93         2/2              @(posedge clock);
94         1/1              hMove <= 4'd4;
95         2/2              @(posedge clock);
96         1/1              hMove <= 4'd5;
97         2/2              @(posedge clock);
98         1/1              hMove <= 4'd7;
99         2/2              @(posedge clock);
100        1/1              hMove <= 4'd8;
101        2/2              @(posedge clock);
102        1/1              hMove <= 4'd9;
103        2/2              @(posedge clock);
104        1/1              hMove <= 4'd10;
105        2/2              @(posedge clock);
106        1/1              hMove <= 4'd11;
107        2/2              @(posedge clock);
108        1/1              hMove <= 4'd12;
109        2/2              @(posedge clock);
110        1/1              hMove <= 4'd13;
111        2/2              @(posedge clock);
112        1/1              hMove <= 4'd14;
113        2/2              @(posedge clock);
114        1/1              hMove <= 4'd15;
115        2/2              @(posedge clock);
116                         
117        1/1              hMove <= 4'd6;
118        2/2              @(posedge clock); // To first
119                     
120                         // Start testing First
121        1/1              hMove <= 4'd0;
122        2/2              @(posedge clock);
123        1/1              hMove <= 4'd1;
124        2/2              @(posedge clock);
125        1/1              hMove <= 4'd5;
126        2/2              @(posedge clock);
127        1/1              hMove <= 4'd6;
128        2/2              @(posedge clock);
129        1/1              hMove <= 4'd10;
130        2/2              @(posedge clock);
131        1/1              hMove <= 4'd11;
132        2/2              @(posedge clock);
133        1/1              hMove <= 4'd12;
134        2/2              @(posedge clock);
135        1/1              hMove <= 4'd13;
136        2/2              @(posedge clock);
137        1/1              hMove <= 4'd14;
138        2/2              @(posedge clock);
139        1/1              hMove <= 4'd15;
140        2/2              @(posedge clock);
141                     
142                         // To win1
143        1/1              hMove <= 4'd2;
144        2/2              @(posedge clock);
145        1/1              reset_N <= 0;
146        2/2              @(posedge clock);
147        1/1              reset_N <= 1;
148                         
149        1/1              hMove <= 4'd3;
150        2/2              @(posedge clock);
151        1/1              reset_N <= 0;
152        2/2              @(posedge clock);
153        1/1              reset_N <= 1;
154                         
155        1/1              hMove <= 4'd4;
156        2/2              @(posedge clock);
157        1/1              reset_N <= 0;
158        2/2              @(posedge clock);
159        1/1              reset_N <= 1;
160                         
161        1/1              hMove <= 4'd7;
162        2/2              @(posedge clock);
163        1/1              reset_N <= 0;
164        2/2              @(posedge clock);
165        1/1              reset_N <= 1;
166                     
167        1/1              hMove <= 4'd8;
168        2/2              @(posedge clock);
169                     
170                         // Start testing win1
171        1/1              for (logic [3:0] i = 4'd0; i < 4'b1111; i++) begin
172        1/1                hMove <= i;
173        2/2                @(posedge clock);
174                         end
175        1/1              hMove <= 4'b1111;
176        2/2              @(posedge clock);
177        1/1              reset_N <= 0;
178        2/2              @(posedge clock);
179        1/1              reset_N <= 1;
180                     
181        1/1              hMove <= 4'd6;
182        2/2              @(posedge clock);
183        1/1              reset_N <= 0;
184        2/2              @(posedge clock);
185        1/1              reset_N <= 1;
186                     
187                         // Start testing second
188        1/1              hMove <= 4'd6;
189        2/2              @(posedge clock);
190        1/1              hMove <= 4'd9;
191        2/2              @(posedge clock);
192        1/1              reset_N <= 0;
193        2/2              @(posedge clock); // test reset
194        1/1              reset_N <=1;
195        1/1              hMove <= 4'd6;
196        2/2              @(posedge clock);
197        1/1              hMove <= 4'd9;
198        2/2              @(posedge clock);
199        1/1              hMove <= 4'd0;
200        2/2              @(posedge clock); // test invalid cases
201        1/1              hMove <= 4'd1;
202        2/2              @(posedge clock);
203        1/1              hMove <= 4'd3;
204        2/2              @(posedge clock);
205        1/1              hMove <= 4'd5;
206        2/2              @(posedge clock);
207        1/1              hMove <= 4'd9;
208        2/2              @(posedge clock);
209        1/1              hMove <= 4'd10;
210        2/2              @(posedge clock);
211        1/1              hMove <= 4'd11;
212        2/2              @(posedge clock);
213        1/1              hMove <= 4'd12;
214        2/2              @(posedge clock);
215        1/1              hMove <= 4'd13;
216        2/2              @(posedge clock);
217        1/1              hMove <= 4'd14;
218        2/2              @(posedge clock);
219        1/1              hMove <= 4'd15;
220        2/2              @(posedge clock);
221                     
222        1/1              hMove <= 4'd2;
223        2/2              @(posedge clock); // to win3
224                     
225                         // Test win3
226        1/1              for (logic [3:0] i = 4'd0; i < 4'b1111; i++) begin
227        1/1                hMove <= i;
228        2/2                @(posedge clock);
229                         end
230        1/1              hMove <= 4'b1111;
231        2/2              @(posedge clock);
232        1/1              reset_N <= 0;
233        2/2              @(posedge clock);
234        1/1              reset_N <= 1;
235        1/1              hMove <= 4'd6;
236        2/2              @(posedge clock);
237        1/1              hMove <= 4'd9;
238        2/2              @(posedge clock);
239        1/1              hMove <= 4'd4;
240        2/2              @(posedge clock);
241                     
242        1/1              reset_N <= 0;
243        2/2              @(posedge clock);
244        1/1              reset_N <= 1;
245        1/1              hMove <= 4'd6;
246        2/2              @(posedge clock);
247        1/1              hMove <= 4'd9;
248        2/2              @(posedge clock);
249        1/1              hMove <= 4'd7;
250        2/2              @(posedge clock);
251                     
252        1/1              reset_N <= 0;
253        2/2              @(posedge clock);
254        1/1              reset_N <= 1;
255        1/1              hMove <= 4'd6;
256        2/2              @(posedge clock);
257        1/1              hMove <= 4'd9;
258        2/2              @(posedge clock); // return to second
259        1/1              hMove <= 4'd8;
260        2/2              @(posedge clock);
261                         
262                         // Test win2
263        1/1              for (logic [3:0] i = 4'd0; i < 4'b1111; i++) begin
264        1/1                hMove <= i;
265        2/2                @(posedge clock);
266                         end
267        1/1              hMove <= 4'b1111;
268        2/2              @(posedge clock);
269        1/1              reset_N <= 0;
270        2/2              @(posedge clock);
271        1/1              reset_N <= 1;
272        2/2              @(posedge clock);
273        2/2              #1 $finish;

-------------------------------------------------------------------------------
===============================================================================
Module Instance : abstractFSM_test
===============================================================================

Instance :

SCORE  LINE   FSM    
100.00 100.00 --     


Instance's subtree :

SCORE  LINE   FSM    
100.00 100.00 100.00 


Module : 

SCORE  LINE   FSM    NAME             
100.00 100.00 --     abstractFSM_test 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   FSM    NAME 
100.00 100.00 100.00 DUT  



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
